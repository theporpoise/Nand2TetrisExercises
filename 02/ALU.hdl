// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:

   // Step 1 
   // Generating the correct 16 bit selection zero conditions
   // checking the zero conditions, zeroing if true, ignoruing otherwise.
   Mux16(a[0..15]=true, b[0..15]=false, sel=zx, out=selectzx);
   Mux16(a[0..15]=true, b[0..15]=false, sel=zy, out=selectzy);

   And16(a=x,b=selectzx, out=outzx ); 
   And16(a=y,b=selectzy, out=outzy);

   // generating the negate outputs, nx and ny.  negate is not 16 
   Not16(in=outzx ,out=xnot );
   Not16(in=outzy ,out=ynot );

   // Inc16(in=xalmostnot ,out=xnot );
   // Inc16(in=yalmostnot ,out=ynot );

   Mux16(a=outzx, b=xnot, sel=nx, out=outnx);
   Mux16(a=outzy, b=ynot, sel=ny, out=outny);


   // f function, what function to perform, Anding or adding zx or zy
   And16(a=outnx,b=outny, out=fand);
   Add16(a=outnx ,b=outny ,out=fadd );
   Mux16(a=fand, b=fadd, sel=f, out=funcout);

   // checking if we want to negate the output
   // negate the output of previous then mux

   Not16(in=funcout ,out=funcnot );
   //Inc16(in=funcalmostnot ,out=funcnot );

   //Sending results of output and negative check to coutput, sending zerocheck
   //for final verification
   Mux16(a=funcout, b=funcnot, sel=no, out=out, out[15]=ng, out[0..7]=or81, out[8..15]=or82);
   

   // generating zr output, check equivalence of out with zero
   Or8Way(in=or81 ,out=or9 );
   Or8Way(in=or82 ,out=or10 );
   Or(a=or9 ,b=or10 ,out=notzr ); 
   Not(in=notzr ,out=zr );












}


