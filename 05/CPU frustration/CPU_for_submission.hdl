// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not(in=instruction[15] ,out=aload1 );
    Or(a=aload1, b=instruction[5], out=aload2);

    Mux16(a=instruction ,b=ALU16tomux1 ,sel=instruction[15] ,out=mux1out );

    // decides to aload2 if it's an address instruction or if it's an instruction
    // that directs to load the A register!
    ARegister(in=mux1out ,load=aload2 , out=mux2in, out[0..14]=addressM, out=pcin );


    Mux16(a=mux2in ,b=inM ,sel=instruction[12] ,out=mux2out );


    ALU(x=dregisterout ,y=mux2out ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=outM, out=ALU16tomux1, out=ALU16todregister ,zr=iszero ,ng=isnegative );

    And(a=instruction[4], b=instruction[15], out=dload);
    DRegister(in=ALU16todregister ,load=dload ,out=dregisterout );

    // check conditionals
    // finding greater than
    // re-write using Not Xor's. . . use is_different1, etc.
    // then see if the magic works.
    Or(a=iszero ,b=isnegative ,out=notgreater );
    Not(in=notgreater ,out=greater );

    // if both are greater than     
    And(a=instruction[0], b=greater, out=greaterthan);   

    // if both are zero
    And(a=instruction[1], b=iszero, out=equalzero); 

    // if both negative 
    And(a=instruction[2], b=isnegative, out=negative); 

    Or(a=negative, b=equalzero, out=lessequal);
    Or(a=lessequal, b=greaterthan, out=jump);
    And(a=instruction[15], b=jump, out=PCload); 
    Not(in=PCload, out=opload);


    PC(in=pcin ,load=PCload ,inc=opload ,reset=reset ,out[0..14]=pc ); 

    And(a=instruction[3] ,b=instruction[15] ,out=writeM );
}


