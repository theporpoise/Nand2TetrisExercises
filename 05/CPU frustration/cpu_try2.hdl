    Not(in=instruction[15] ,out=aload );

    Mux16(a=instruction ,b=ALU16tomux1 ,sel=instruction[15] ,out=mux1out );
    // will need to connect ALUtomux1 from ALU at the end
    // pulled sel the msb of instruction.

    ARegister(in=mux1out ,load=aload , out=mux2in, out[0..14]=addressM, out=pcin );
    // A control bit comes from ddd after the ALU processes, will get it later
    // this control bit may actually come from the instruction, let me think.

    Mux16(a=mux2in ,b=inM ,sel=instruction[12] ,out=mux2out );
    // set select to current instruction (this is a good guess at this point)

    ALU(x=dregisterout ,y=mux2out ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=outM, out=ALU16tomux1, out=ALU16todregister ,zr=iszero ,ng=isnegative );

    DRegister(in=ALU16todregister ,load=instruction[4] ,out=dregisterout );

    // finding greater than
    Or(a=iszero ,b=isnegative ,out=notgreater );
    Not(in=notgreater ,out=greater );

    // checking if j instructions match ALU output for greater, zero, or less than.
    And(a=instruction[0] ,b=greater ,out=greatermatch );
    And(a=instruction[1] ,b=iszero ,out=zeromatch );
    And(a=instruction[2] ,b=isnegative ,out=negativematch );

    // getting load calc
    And(a=greatermatch ,b=zeromatch ,out=match1 );
    And(a=match1 ,b=negativematch ,out=loadcalc );

    PC(in=pcin ,load=loadcalc ,inc=true ,reset=reset ,out[0..14]=pc ); 

    And(a=instruction[3] ,b=instruction[3] ,out=zwrite );
