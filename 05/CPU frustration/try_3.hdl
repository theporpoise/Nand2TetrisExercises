    
    Not(in=instruction[15] ,out=aload );

    Mux16(a=instruction ,b=ALU16tomux1 ,sel=instruction[15] ,out=mux1out );

    ARegister(in=mux1out ,load=aload , out=mux2in, out[0..14]=addressM, out=pcin );


    Mux16(a=mux2in ,b=inM ,sel=instruction[12] ,out=mux2out );


    ALU(x=dregisterout ,y=mux2out ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=outM, out=ALU16tomux1, out=ALU16todregister ,zr=iszero ,ng=isnegative, out[0..2]=choice );

    And(a=instruction[4], b=instruction[15], out=dload)
    DRegister(in=ALU16todregister ,load=dload ,out=dregisterout );


    // all one's check, immediate jump
    And(a=instruction[0] ,b=instruction[1] ,out=out1 );
    And(a=out1 ,b=instruction[2] ,out=all1scheck );

    // check conditionals
    // finding greater than
    Or(a=iszero ,b=isnegative ,out=notgreater );
    Not(in=notgreater ,out=greater );

    And(a=instruction[1], b=iszero, out=jeq); // if JEQ and out == 0
    And(a=instruction[2], b=isnegative, out=jlt); // if JLT and out < 0
    And(a=instruction[0], b=greater, out=jgt); // if JGT and out > 0       
    Or(a=jlt, b=jeq, out=jle);
    Or(a=jle, b=jgt, out=jmp);
    And(a=instruction[15], b=jmp, out=loadPc); // only load PC if C-inst conditions met
    Not(in=loadPc, out=opload);


    PC(in=pcin ,load=loadPc ,inc=opload ,reset=reset ,out[0..14]=pc ); 

    And(a=instruction[3] ,b=instruction[15] ,out=writeM );