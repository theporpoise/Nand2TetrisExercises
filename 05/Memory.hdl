// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    // looks like you use 14 of the bits to go to the right memory location and 2 of the
    // bits to decide between which of the 3 devices you are going to use.
    // then you use RAM16k chip, KBD, and Screen chip to output the address   

    // Generating the load or no load value for each RAM4K
    DMux4Way(in=load ,sel=address[13..14] ,a=d0 ,b=d1 ,c=d2 ,d=d3);

    Or(a=d0 ,b=d1 ,out=ramload);

    RAM16K(in=in ,load=ramload ,address=address[0..13] ,out=m0, out=m1 ); 
    Screen(in=in ,load=d2 ,address=address[0..12] ,out=m2 );
    Keyboard(out=m3 );

    //Selects which output using the msb.
    Mux4Way16(a=m0 ,b=m1 ,c=m2 ,d=m3 ,sel=address[13..14] ,out=out );
}



